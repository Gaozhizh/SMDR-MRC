function [Avg_Means,Avg_Stds] = Main(dataset)
dataset_name = dataset;
load(dataset);

addpath(genpath('.'));
%% Model Parameters
modelparameter.round              = 10;

%% Optimization Parameters
lambda1s = [0.1,1];
alphas   = [0.0001,0.001,0.01,0.1];
betas    = [0.0001,0.001,0.01,0.1];
gammas   = [0.0001,0.001,0.01,0.1];
lambda2s = [0.00001,0.0001,0.01,0.1];
optmParameter.sigma   = 3; % {0.1, 1, 10} % initialization
optmParameter.miu = 0.5;

optmParameter.maxIter           = 50;%最大迭代次数
optmParameter.minimumLossMargin = 0.001;%两次迭代的最小损失间距  0.0001
optmParameter.bQuiet            = 1;

labeled_rate = 0.2; % 0.7, 0.5, 0.2
%% Label Propagation Parameters
LPparam.lambda_l = 0;
LPparam.lambda_u = 0.99;
LPparam.K = 10;

%% cross validation
if exist('train_data','var')==1
    data=[train_data;test_data];
    target=[train_target;test_taget];
    clear train_data test_data train_target test_taget
end
if exist('dataset','var')==1
    data = dataset;
    target = labels;
    clear dataset labels
end

data     = double(data);
% 归一化
%minMaxd = mapminmax(data');
%data = minMaxd';
target = double(target>0);
num_data = size(data,1);

num_test = ceil(num_data*0.3);
num_train = num_data - num_test;
num_label = ceil(num_train*labeled_rate);
Result_NEW  = zeros(7,modelparameter.round);

beta_num = length(betas);
alpha_num = length(alphas);
gamma_num = length(gammas);
lambda1_num = length(lambda1s);
lambda2_num = length(lambda2s);
Para_num =  beta_num * alpha_num * gamma_num *lambda1_num * lambda2_num;
Avg_Means = zeros(7,Para_num);
Avg_Stds = zeros(7,Para_num);

a  = 0;
l1 = 0;
b  = 0;
g  = 0;
l2 = 0;
k  = 1;
j  = 1;


for alpha = alphas
    optmParameter.alpha = alpha;
    a = a + 1;
    for lambda1 = lambda1s
        optmParameter.lambda1 = lambda1;
        l1 = l1 + 1;
        for beta = betas
            optmParameter.beta = beta;
            b = b + 1;
            for gamma = gammas
                optmParameter.gamma = gamma;
                g = g +1;
                for lambda2 = lambda2s
                    optmParameter.lambda2 = lambda2;
                    l2 = l2 +1;
                    while (j <= modelparameter.round)
                        fprintf('SMDR-MRC Running %s alpha - %d/%d lambda1 - %d/%d beta - %d/%d gamma - %d/%d lambda2 - %d/%d Time - %d/%d \n',dataset_name,a,alpha_num,l1,lambda1_num,b,beta_num,g,gamma_num,l2,lambda2_num,j,modelparameter.round);
                        %% the training and test parts are generated by fixed spliting with the given random order
                        randorder = randperm(num_data);
                        train_index = randorder(1:num_train);
                        test_index = randorder(num_train + 1:num_data);
                        randorder = train_index(randperm(num_train));
                        label_index = randorder(1:num_label);
                        unlabel_index = randorder((num_label+1):num_train);
                        
                        label_data = data(label_index,:); % 有标记训练样本
                        label_target = target(:,label_index); % 有标记训练样本的标签
                        unlabel_data = data(unlabel_index,:); % 无标记训练样本
                        test_data = data(test_index,:); % 测试样本
                        test_target = target(:,test_index); % 测试样本的标签
            
                        % train_data = [label_data;unlabel_data];
            
                        r = size(test_target,1) - 1; % 降维维度
            
                        %% Training
                        [W,M]  = SMDR_MRC(label_data,unlabel_data,label_target,LPparam,optmParameter,r);
                        MLKNN_train_data = label_data * (W + M);
                        MLKNN_test_data = test_data *  (W + M);
                        MLKNN_train_label = label_target;
                        MLKNN_test_label = test_target;
                        MLKNN_train_label(MLKNN_train_label == 0) = -1;
                        MLKNN_test_label(MLKNN_test_label == 0) = -1;
                        % plot(loss);
                        %% Begin MLKNN
                        Num=10;
                        Smooth=1;
                        [Prior,PriorN,Cond,CondN]=MLKNN_train(MLKNN_train_data,MLKNN_train_label,Num,Smooth); % Invoking the training procedure
                        [Outputs,Pre_Labels]=MLKNN_test(MLKNN_train_data,MLKNN_train_label,MLKNN_test_data,MLKNN_test_label,Num,Prior,PriorN,Cond,CondN);
                        
                        %% Evaluation of NEW
                        Result_NEW(:,j) = EvaluationAll(Pre_Labels,Outputs,MLKNN_test_label);%参数均为转置
                        if sum(isnan(Result_NEW(:,j))) == 0
                            j = j + 1;
                        end
                    end
                    %% the average results
                    Avg_Means(1:7,k) = mean(Result_NEW,2);%平均值 2代表行
                    Avg_Stds(1:7,k) = std(Result_NEW,1,2);%标准差
                    Avg_Means(8,k) = alpha;
                    Avg_Means(9,k) = lambda1;
                    Avg_Means(10,k) = beta;
                    Avg_Means(11,k) = gamma; 
                    Avg_Means(12,k) = lambda2; 
                    k = k + 1;
                    j = 1;
                end
                l2 = 0;
            end
            g = 0;
        end
        b = 0;
    end
    l1 = 0;
end

Avg_Means = Avg_Means';
Avg_Stds = Avg_Stds';

end
